// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_ExchangeToken_FullMethodName    = "/api.TaskService/ExchangeToken"
	TaskService_GetTasks_FullMethodName         = "/api.TaskService/GetTasks"
	TaskService_NextStep_FullMethodName         = "/api.TaskService/NextStep"
	TaskService_UpdateLog_FullMethodName        = "/api.TaskService/UpdateLog"
	TaskService_UpdateTaskStatus_FullMethodName = "/api.TaskService/UpdateTaskStatus"
	TaskService_UpdateTaskValue_FullMethodName  = "/api.TaskService/UpdateTaskValue"
	TaskService_AgentPing_FullMethodName        = "/api.TaskService/AgentPing"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type TaskServiceClient interface {
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*Token, error)
	GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error)
	NextStep(ctx context.Context, in *NextStepRequest, opts ...grpc.CallOption) (*Steps, error)
	UpdateLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*Empty, error)
	UpdateTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*Empty, error)
	UpdateTaskValue(ctx context.Context, in *KeyValueList, opts ...grpc.CallOption) (*Empty, error)
	AgentPing(ctx context.Context, in *AgentSpec, opts ...grpc.CallOption) (*Empty, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*Token, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Token)
	err := c.cc.Invoke(ctx, TaskService_ExchangeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskService_GetTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) NextStep(ctx context.Context, in *NextStepRequest, opts ...grpc.CallOption) (*Steps, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Steps)
	err := c.cc.Invoke(ctx, TaskService_NextStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_UpdateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTaskValue(ctx context.Context, in *KeyValueList, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_UpdateTaskValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AgentPing(ctx context.Context, in *AgentSpec, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskService_AgentPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
//
// Service definition
type TaskServiceServer interface {
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*Token, error)
	GetTasks(context.Context, *Empty) (*TaskList, error)
	NextStep(context.Context, *NextStepRequest) (*Steps, error)
	UpdateLog(context.Context, *LogEntry) (*Empty, error)
	UpdateTaskStatus(context.Context, *TaskStatus) (*Empty, error)
	UpdateTaskValue(context.Context, *KeyValueList) (*Empty, error)
	AgentPing(context.Context, *AgentSpec) (*Empty, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) ExchangeToken(context.Context, *ExchangeTokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (UnimplementedTaskServiceServer) GetTasks(context.Context, *Empty) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskServiceServer) NextStep(context.Context, *NextStepRequest) (*Steps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextStep not implemented")
}
func (UnimplementedTaskServiceServer) UpdateLog(context.Context, *LogEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTaskStatus(context.Context, *TaskStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTaskValue(context.Context, *KeyValueList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskValue not implemented")
}
func (UnimplementedTaskServiceServer) AgentPing(context.Context, *AgentSpec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentPing not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ExchangeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_NextStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).NextStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_NextStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).NextStep(ctx, req.(*NextStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateLog(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTaskStatus(ctx, req.(*TaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTaskValue(ctx, req.(*KeyValueList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AgentPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AgentPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AgentPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AgentPing(ctx, req.(*AgentSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeToken",
			Handler:    _TaskService_ExchangeToken_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskService_GetTasks_Handler,
		},
		{
			MethodName: "NextStep",
			Handler:    _TaskService_NextStep_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _TaskService_UpdateLog_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TaskService_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "UpdateTaskValue",
			Handler:    _TaskService_UpdateTaskValue_Handler,
		},
		{
			MethodName: "AgentPing",
			Handler:    _TaskService_AgentPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
