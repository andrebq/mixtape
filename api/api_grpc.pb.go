// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskManager_RegisterSupervisor_FullMethodName = "/api.TaskManager/RegisterSupervisor"
	TaskManager_FetchTask_FullMethodName          = "/api.TaskManager/FetchTask"
	TaskManager_AppendLog_FullMethodName          = "/api.TaskManager/AppendLog"
	TaskManager_UploadAsset_FullMethodName        = "/api.TaskManager/UploadAsset"
	TaskManager_WaitForInput_FullMethodName       = "/api.TaskManager/WaitForInput"
)

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerClient interface {
	RegisterSupervisor(ctx context.Context, in *SupervisorStats, opts ...grpc.CallOption) (*SupervisorConfig, error)
	FetchTask(ctx context.Context, in *RunnerSpec, opts ...grpc.CallOption) (*NextTask, error)
	AppendLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*Empty, error)
	UploadAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*AssetRef, error)
	WaitForInput(ctx context.Context, in *InputRequest, opts ...grpc.CallOption) (*InputResponse, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) RegisterSupervisor(ctx context.Context, in *SupervisorStats, opts ...grpc.CallOption) (*SupervisorConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupervisorConfig)
	err := c.cc.Invoke(ctx, TaskManager_RegisterSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) FetchTask(ctx context.Context, in *RunnerSpec, opts ...grpc.CallOption) (*NextTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextTask)
	err := c.cc.Invoke(ctx, TaskManager_FetchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) AppendLog(ctx context.Context, in *LogEntry, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskManager_AppendLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) UploadAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*AssetRef, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetRef)
	err := c.cc.Invoke(ctx, TaskManager_UploadAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) WaitForInput(ctx context.Context, in *InputRequest, opts ...grpc.CallOption) (*InputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputResponse)
	err := c.cc.Invoke(ctx, TaskManager_WaitForInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
// All implementations must embed UnimplementedTaskManagerServer
// for forward compatibility.
type TaskManagerServer interface {
	RegisterSupervisor(context.Context, *SupervisorStats) (*SupervisorConfig, error)
	FetchTask(context.Context, *RunnerSpec) (*NextTask, error)
	AppendLog(context.Context, *LogEntry) (*Empty, error)
	UploadAsset(context.Context, *Asset) (*AssetRef, error)
	WaitForInput(context.Context, *InputRequest) (*InputResponse, error)
	mustEmbedUnimplementedTaskManagerServer()
}

// UnimplementedTaskManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskManagerServer struct{}

func (UnimplementedTaskManagerServer) RegisterSupervisor(context.Context, *SupervisorStats) (*SupervisorConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSupervisor not implemented")
}
func (UnimplementedTaskManagerServer) FetchTask(context.Context, *RunnerSpec) (*NextTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTask not implemented")
}
func (UnimplementedTaskManagerServer) AppendLog(context.Context, *LogEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendLog not implemented")
}
func (UnimplementedTaskManagerServer) UploadAsset(context.Context, *Asset) (*AssetRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedTaskManagerServer) WaitForInput(context.Context, *InputRequest) (*InputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForInput not implemented")
}
func (UnimplementedTaskManagerServer) mustEmbedUnimplementedTaskManagerServer() {}
func (UnimplementedTaskManagerServer) testEmbeddedByValue()                     {}

// UnsafeTaskManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServer will
// result in compilation errors.
type UnsafeTaskManagerServer interface {
	mustEmbedUnimplementedTaskManagerServer()
}

func RegisterTaskManagerServer(s grpc.ServiceRegistrar, srv TaskManagerServer) {
	// If the following call pancis, it indicates UnimplementedTaskManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskManager_ServiceDesc, srv)
}

func _TaskManager_RegisterSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupervisorStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).RegisterSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManager_RegisterSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).RegisterSupervisor(ctx, req.(*SupervisorStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_FetchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).FetchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManager_FetchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).FetchTask(ctx, req.(*RunnerSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_AppendLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).AppendLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManager_AppendLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).AppendLog(ctx, req.(*LogEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_UploadAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).UploadAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManager_UploadAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).UploadAsset(ctx, req.(*Asset))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_WaitForInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).WaitForInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskManager_WaitForInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).WaitForInput(ctx, req.(*InputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManager_ServiceDesc is the grpc.ServiceDesc for TaskManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSupervisor",
			Handler:    _TaskManager_RegisterSupervisor_Handler,
		},
		{
			MethodName: "FetchTask",
			Handler:    _TaskManager_FetchTask_Handler,
		},
		{
			MethodName: "AppendLog",
			Handler:    _TaskManager_AppendLog_Handler,
		},
		{
			MethodName: "UploadAsset",
			Handler:    _TaskManager_UploadAsset_Handler,
		},
		{
			MethodName: "WaitForInput",
			Handler:    _TaskManager_WaitForInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
