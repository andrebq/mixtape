package mailbox

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Address) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "n":
			err = dc.ReadExactBytes((z.Node)[:])
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "p":
			z.Process, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Address) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "n"
	err = en.Append(0x82, 0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Node)[:])
	if err != nil {
		err = msgp.WrapError(err, "Node")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Process)
	if err != nil {
		err = msgp.WrapError(err, "Process")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Address) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "n"
	o = append(o, 0x82, 0xa1, 0x6e)
	o = msgp.AppendBytes(o, (z.Node)[:])
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendUint64(o, z.Process)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Address) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "n":
			bts, err = msgp.ReadExactBytes(bts, (z.Node)[:])
			if err != nil {
				err = msgp.WrapError(err, "Node")
				return
			}
		case "p":
			z.Process, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Address) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 2 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			err = dc.ReadExactBytes((z.ID)[:])
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "f":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "From")
					return
				}
				switch msgp.UnsafeString(field) {
				case "n":
					err = dc.ReadExactBytes((z.From.Node)[:])
					if err != nil {
						err = msgp.WrapError(err, "From", "Node")
						return
					}
				case "p":
					z.From.Process, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "From", "Process")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "From")
						return
					}
				}
			}
		case "t":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "To")
					return
				}
				switch msgp.UnsafeString(field) {
				case "n":
					err = dc.ReadExactBytes((z.To.Node)[:])
					if err != nil {
						err = msgp.WrapError(err, "To", "Node")
						return
					}
				case "p":
					z.To.Process, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "To", "Process")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "To")
						return
					}
				}
			}
		case "p":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "rt":
			err = dc.ReadExactBytes((z.ReplyTo)[:])
			if err != nil {
				err = msgp.WrapError(err, "ReplyTo")
				return
			}
		case "h":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if z.Headers == nil {
				z.Headers = make(map[string][]string, zb0004)
			} else if len(z.Headers) > 0 {
				for key := range z.Headers {
					delete(z.Headers, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 string
				var za0006 []string
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Headers")
					return
				}
				var zb0005 uint32
				zb0005, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0005)
					return
				}
				if cap(za0006) >= int(zb0005) {
					za0006 = (za0006)[:zb0005]
				} else {
					za0006 = make([]string, zb0005)
				}
				for za0007 := range za0006 {
					za0006[za0007], err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0005, za0007)
						return
					}
				}
				z.Headers[za0005] = za0006
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Message) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Headers == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "i"
		err = en.Append(0xa1, 0x69)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.ID)[:])
		if err != nil {
			err = msgp.WrapError(err, "ID")
			return
		}
		// write "f"
		err = en.Append(0xa1, 0x66)
		if err != nil {
			return
		}
		// map header, size 2
		// write "n"
		err = en.Append(0x82, 0xa1, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.From.Node)[:])
		if err != nil {
			err = msgp.WrapError(err, "From", "Node")
			return
		}
		// write "p"
		err = en.Append(0xa1, 0x70)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.From.Process)
		if err != nil {
			err = msgp.WrapError(err, "From", "Process")
			return
		}
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return
		}
		// map header, size 2
		// write "n"
		err = en.Append(0x82, 0xa1, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.To.Node)[:])
		if err != nil {
			err = msgp.WrapError(err, "To", "Node")
			return
		}
		// write "p"
		err = en.Append(0xa1, 0x70)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.To.Process)
		if err != nil {
			err = msgp.WrapError(err, "To", "Process")
			return
		}
		// write "p"
		err = en.Append(0xa1, 0x70)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Payload)
		if err != nil {
			err = msgp.WrapError(err, "Payload")
			return
		}
		// write "rt"
		err = en.Append(0xa2, 0x72, 0x74)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.ReplyTo)[:])
		if err != nil {
			err = msgp.WrapError(err, "ReplyTo")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "h"
			err = en.Append(0xa1, 0x68)
			if err != nil {
				return
			}
			err = en.WriteMapHeader(uint32(len(z.Headers)))
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			for za0005, za0006 := range z.Headers {
				err = en.WriteString(za0005)
				if err != nil {
					err = msgp.WrapError(err, "Headers")
					return
				}
				err = en.WriteArrayHeader(uint32(len(za0006)))
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0005)
					return
				}
				for za0007 := range za0006 {
					err = en.WriteString(za0006[za0007])
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0005, za0007)
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Headers == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "i"
		o = append(o, 0xa1, 0x69)
		o = msgp.AppendBytes(o, (z.ID)[:])
		// string "f"
		o = append(o, 0xa1, 0x66)
		// map header, size 2
		// string "n"
		o = append(o, 0x82, 0xa1, 0x6e)
		o = msgp.AppendBytes(o, (z.From.Node)[:])
		// string "p"
		o = append(o, 0xa1, 0x70)
		o = msgp.AppendUint64(o, z.From.Process)
		// string "t"
		o = append(o, 0xa1, 0x74)
		// map header, size 2
		// string "n"
		o = append(o, 0x82, 0xa1, 0x6e)
		o = msgp.AppendBytes(o, (z.To.Node)[:])
		// string "p"
		o = append(o, 0xa1, 0x70)
		o = msgp.AppendUint64(o, z.To.Process)
		// string "p"
		o = append(o, 0xa1, 0x70)
		o = msgp.AppendBytes(o, z.Payload)
		// string "rt"
		o = append(o, 0xa2, 0x72, 0x74)
		o = msgp.AppendBytes(o, (z.ReplyTo)[:])
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "h"
			o = append(o, 0xa1, 0x68)
			o = msgp.AppendMapHeader(o, uint32(len(z.Headers)))
			for za0005, za0006 := range z.Headers {
				o = msgp.AppendString(o, za0005)
				o = msgp.AppendArrayHeader(o, uint32(len(za0006)))
				for za0007 := range za0006 {
					o = msgp.AppendString(o, za0006[za0007])
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			bts, err = msgp.ReadExactBytes(bts, (z.ID)[:])
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "f":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "From")
					return
				}
				switch msgp.UnsafeString(field) {
				case "n":
					bts, err = msgp.ReadExactBytes(bts, (z.From.Node)[:])
					if err != nil {
						err = msgp.WrapError(err, "From", "Node")
						return
					}
				case "p":
					z.From.Process, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "From", "Process")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "From")
						return
					}
				}
			}
		case "t":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "To")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "To")
					return
				}
				switch msgp.UnsafeString(field) {
				case "n":
					bts, err = msgp.ReadExactBytes(bts, (z.To.Node)[:])
					if err != nil {
						err = msgp.WrapError(err, "To", "Node")
						return
					}
				case "p":
					z.To.Process, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "To", "Process")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "To")
						return
					}
				}
			}
		case "p":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "rt":
			bts, err = msgp.ReadExactBytes(bts, (z.ReplyTo)[:])
			if err != nil {
				err = msgp.WrapError(err, "ReplyTo")
				return
			}
		case "h":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if z.Headers == nil {
				z.Headers = make(map[string][]string, zb0004)
			} else if len(z.Headers) > 0 {
				for key := range z.Headers {
					delete(z.Headers, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 []string
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Headers")
					return
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0005)
					return
				}
				if cap(za0006) >= int(zb0005) {
					za0006 = (za0006)[:zb0005]
				} else {
					za0006 = make([]string, zb0005)
				}
				for za0007 := range za0006 {
					za0006[za0007], bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0005, za0007)
						return
					}
				}
				z.Headers[za0005] = za0006
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 2 + 1 + 2 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 2 + msgp.Uint64Size + 2 + 1 + 2 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 2 + msgp.Uint64Size + 2 + msgp.BytesPrefixSize + len(z.Payload) + 3 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 2 + msgp.MapHeaderSize
	if z.Headers != nil {
		for za0005, za0006 := range z.Headers {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.ArrayHeaderSize
			for za0007 := range za0006 {
				s += msgp.StringPrefixSize + len(za0006[za0007])
			}
		}
	}
	return
}
